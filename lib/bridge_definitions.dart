// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.72.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

abstract class Native {
  Future<String> trainKnn(
      {required int k, required List<LabeledImage> examples, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTrainKnnConstMeta;

  Future<String> classifyKnn({required Uint8List img, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kClassifyKnnConstMeta;

  Future<String> trainKnnAkazePos(
      {required int k, required List<LabeledImage> examples, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTrainKnnAkazePosConstMeta;

  Future<String> trainKnnAkazeFeatures(
      {required int k, required List<LabeledImage> examples, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTrainKnnAkazeFeaturesConstMeta;

  Future<String> classifyKnnAkazePos({required DartImage img, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kClassifyKnnAkazePosConstMeta;

  Future<String> classifyKnnAkazeFeature(
      {required DartImage img, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kClassifyKnnAkazeFeatureConstMeta;

  Future<bool> kmeansReady({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kKmeansReadyConstMeta;

  Future<int> trainingTime({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTrainingTimeConstMeta;

  Future<ImageResponse> intensityRgba(
      {required Uint8List intensities, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIntensityRgbaConstMeta;

  Future<ImageResponse> yuvRgba({required ImageData img, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kYuvRgbaConstMeta;

  Future<int> colorCount({required ImageData img, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kColorCountConstMeta;

  Future<ImageResponse> colorClusterer({required ImageData img, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kColorClustererConstMeta;

  Future<ImageResponse> akazeView({required ImageData img, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAkazeViewConstMeta;

  Future<ImageResponse> akazeFlow({required ImageData img, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAkazeFlowConstMeta;

  Future<void> resetPositionEstimate({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kResetPositionEstimateConstMeta;

  Future<String> processSensorData(
      {required String incomingData, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kProcessSensorDataConstMeta;

  Future<SensorData> parseSensorData(
      {required String incomingData, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kParseSensorDataConstMeta;
}

class DartImage {
  final Uint8List bytes;
  final int width;
  final int height;

  const DartImage({
    required this.bytes,
    required this.width,
    required this.height,
  });
}

class ImageData {
  final Uint8List ys;
  final Uint8List us;
  final Uint8List vs;
  final int width;
  final int height;
  final int uvRowStride;
  final int uvPixelStride;

  const ImageData({
    required this.ys,
    required this.us,
    required this.vs,
    required this.width,
    required this.height,
    required this.uvRowStride,
    required this.uvPixelStride,
  });
}

class ImageResponse {
  final Uint8List img;
  final String msg;

  const ImageResponse({
    required this.img,
    required this.msg,
  });
}

class LabeledImage {
  final String label;
  final DartImage image;

  const LabeledImage({
    required this.label,
    required this.image,
  });
}

class SensorData {
  final int sonarFront;
  final int sonarLeft;
  final int sonarRight;
  final int leftCount;
  final int rightCount;
  final int leftSpeed;
  final int rightSpeed;

  const SensorData({
    required this.sonarFront,
    required this.sonarLeft,
    required this.sonarRight,
    required this.leftCount,
    required this.rightCount,
    required this.leftSpeed,
    required this.rightSpeed,
  });
}
